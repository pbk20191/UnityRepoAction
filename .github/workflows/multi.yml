# This is a basic workflow to help you get started with Actions

name: multi_build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
        tag_name:
          description: "The tag name for the release"
          required: true
          
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_project:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_GITHUB }}
          submodules: true
          lfs: true

      - name: Unity Library Cache
        uses: actions/cache@v4
        with:
          path: |
            vendor/Library
          key: iOS-Unity-Library

      - name: Unity Build Cache
        uses: actions/cache@v4
        with:
          path: |
            vendor/Build/iOS_Device
            vendor/Build/iOS_Simulator
          key: iOS-Unity-Build

      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: iOS
        #   unityVersion: 6000.0.28f1
          projectPath: vendor
          buildMethod: BuildScript.UniversaliOS
          customImage: 'unityci/editor:6000.0.29f1-ios-3.1'

  compile_project:
    # 2024-12-01 macos-14 only has 7GB of memory while macos-13 has double
      runs-on: macos-15
      needs: build_project
      env:
        IOS_DEVICE_PROJECT_PATH: vendor/Build/iOS_Device
        IOS_SIMULATOR_PROJECT_PATH: vendor/Build/iOS_Simulator
        ARCHIVE_PATH: vendor/Build/archives
        DEVICE_ARCHIVE_PATH: vendor/Build/archives/iOS_Device.xcarchive
        SIMULATOR_ARCHIVE_PATH: vendor/Build/archives/iOS_Simulator.xcarchive
        XCFRAMEWORK_NAME: UnityFramework.xcframework
        XCFRAMEWORK_PATH: vendor/Build/archives/UnityFramework.xcframework
      steps:
          
        - uses: maxim-lobanov/setup-xcode@v1
          with:
            xcode-version: latest-stable

        - name: Install the Apple certificate and provisioning profile
          env:
            BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
            P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
            KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          run: |
            # create variables
            CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
            PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
            KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

            # import certificate and provisioning profile from secrets
            echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
            echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

            # create temporary keychain
            security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
            security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
            security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

            # import certificate to keychain
            security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
            security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
            security list-keychain -d user -s $KEYCHAIN_PATH

        - name: Unity Build Cache
          uses: actions/cache@v4
          with:
            path: |
              vendor/Build/iOS_Device
              vendor/Build/iOS_Simulator
            key: iOS-Unity-Build

        - name: Build UnityFramework for iOS Device
          run: |
            xcodebuild -project "${IOS_DEVICE_PROJECT_PATH}/Unity-iPhone.xcodeproj" \
            -scheme UnityFramework \
            -configuration Release \
            -sdk iphoneos \
            BUILD_LIBRARIES_FOR_DISTRIBUTION=YES \
            -archivePath "${DEVICE_ARCHIVE_PATH}" \
            SKIP_INSTALL=NO \
            LLVM_LTO=YES \
            archive

        - name: Build UnityFramework for iOS Simulator
          run: |
            xcodebuild -project "${IOS_SIMULATOR_PROJECT_PATH}/Unity-iPhone.xcodeproj" \
            -scheme UnityFramework \
            -configuration Release \
            -sdk iphonesimulator \
            BUILD_LIBRARIES_FOR_DISTRIBUTION=YES \
            -archivePath "${SIMULATOR_ARCHIVE_PATH}" \
            SKIP_INSTALL=NO \
            LLVM_LTO=YES \
            archive

        - name: Create XCFramework
          run: |
            xcodebuild -create-xcframework \
            -archive "${DEVICE_ARCHIVE_PATH}" -framework UnityFramework.framework \
            -archive "${SIMULATOR_ARCHIVE_PATH}" -framework UnityFramework.framework \
            -output "${XCFRAMEWORK_PATH}"

        - name: Code sign
          run: |
            # Find available codesigning identities
            IDENTITY=$(security find-identity -v -p codesigning | grep -oE '\".*\"' | sed 's/"//g' | head -n 1)
            # Check if an identity is found
            if [ -z "$IDENTITY" ]; then
              echo "No valid code signing identity found."
              exit 1
            fi
            echo "Using identity: $IDENTITY"

            # Perform code signing
            cd vendor/Build/archives && \
            codesign --timestamp -s "Apple" "UnityFramework.xcframework"
        
        - name: zip XCFramework
          run: |
            cd vendor/Build/archives && \
            zip -r -9 UnityFramework-iOS-Release.zip UnityFramework.xcframework && \
            mv -f UnityFramework-iOS-Release.zip ../UnityFramework-iOS-Release.zip
        
        - name: Verify XCFramework
          run: |
            ls -al "vendor/Build/UnityFramework-iOS-Release.zip"

        - name: Compute checksum
          id: compute_checksum
          run: |
              cd vendor/Build
              CHECKSUM=$(swift package compute-checksum UnityFramework-iOS-Release.zip)
              echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT

        - name: Create GitHub Release
          id: create_release
          uses: actions/github-script@v7
          with:
              github-token: ${{ secrets.GITHUB_TOKEN }}
              script: |
                const { data: release } = await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: "${{ github.event.inputs.tag_name }}",
                  name: "UnityFramework ${{ github.event.inputs.tag_name }}",
                  body: "### UnityFramework iOS Release\n- **Checksum**: ${{ steps.compute_checksum.outputs.checksum }}",
                  draft: false,
                  prerelease: false,
                });
                core.setOutput("release_id", release.id);
                core.setOutput("upload_url", release.upload_url);
    
        - name: Upload Release Asset
          id: upload_asset
          uses: actions/github-script@v7
          with:
              script: |
                const fs = require('fs/promises');
                const path = "vendor/Build/UnityFramework-iOS-Release.zip";
                const { data: asset } = await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: ${{ steps.create_release.outputs.release_id }},
                  name: "UnityFramework-iOS-Release.zip",
                  data: await fs.readFile(path),
                  headers: {
                    "content-type": "application/zip",
                    "content-length": (await fs.stat(path)).size,
                  },
                });
                core.setOutput("asset_id", asset.id);
    
        - name: Update Release with Asset ID
          uses: actions/github-script@v7
          with:
            script: |
                const release_id = ${{ steps.create_release.outputs.release_id }};
                const asset_id = ${{ steps.upload_asset.outputs.asset_id }};
                const checksum = "${{ steps.compute_checksum.outputs.checksum }}";
    
                await github.rest.repos.updateRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release_id,
                  body: `### UnityFramework iOS Release\n- **Checksum**: ${checksum}\n- **Asset ID**: ${asset_id}`,
                });
