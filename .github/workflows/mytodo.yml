# This is a basic workflow to help you get started with Actions

name: todo

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  compile_project:
      runs-on: macOS-latest
      env:
        IOS_DEVICE_PROJECT_PATH: vendor/Build/iOS_Device
        IOS_SIMULATOR_PROJECT_PATH: vendor/Build/iOS_Simulator
        ARCHIVE_PATH: vendor/Build/archives
        DEVICE_ARCHIVE_PATH: vendor/Build/archives/iOS_Device.xcarchive
        SIMULATOR_ARCHIVE_PATH: vendor/Build/archives/iOS_Simulator.xcarchive
        XCFRAMEWORK_NAME: UnityFramework.xcframework
        XCFRAMEWORK_PATH: vendor/Build/archives/UnityFramework.xcframework
      steps:
          
        - uses: maxim-lobanov/setup-xcode@v1
          with:
            xcode-version: latest-stable

        - name: Install the Apple certificate and provisioning profile
          env:
            BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
            P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
            KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          run: |
            # create variables
            CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
            PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
            KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

            # import certificate and provisioning profile from secrets
            echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
            echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

            # create temporary keychain
            security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
            security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
            security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

            # import certificate to keychain
            security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
            security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
            security list-keychain -d user -s $KEYCHAIN_PATH

        - name: mk doo
          run: |
            mkdir vendor && \
            mkdir vendor/Build && \
            mkdir vendor/Build/archives && \
            mkdir vendor/Build/archives/UnityFramework.xcframework && \
            echo -e "hello\nworld" >> vendor/Build/archives/UnityFramework.xcframework/my.txt

        - name: zip XCFramework
          run: |
            cd vendor/Build/archives && \
            zip -r -9 UnityFramework-iOS-Release.zip UnityFramework.xcframework && \
            mv -f UnityFramework-iOS-Release.zip ../UnityFramework-iOS-Release.zip
        


        - name: Compute checksum
          id: compute_checksum
          run: |
              cd vendor/Build
              CHECKSUM=$(swift package compute-checksum UnityFramework-iOS-Release.zip)
              echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT

        - name: Create GitHub Release
          id: create_release
          uses: actions/github-script@v7
          with:
              github-token: ${{ secrets.GITHUB_TOKEN }}

              script: |
                const { data: release } = await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: "v1.0.0",
                  name: "UnityFramework v1.0.0",
                  body: "### UnityFramework iOS Release\n- **Checksum**: ${{ steps.compute_checksum.outputs.checksum }}",
                  draft: false,
                  prerelease: false,
                });
                core.setOutput("release_id", release.id);
                core.setOutput("upload_url", release.upload_url);
    
        - name: Upload Release Asset
          id: upload_asset
          uses: actions/github-script@v7
          with:
              script: |
                const fs = require('fs');
                const path = "vendor/Build/UnityFramework-iOS-Release.zip";
                const { data: asset } = await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: ${{ steps.create_release.outputs.release_id }},
                  name: "UnityFramework-iOS-Release.zip",
                  data: fs.readFileSync(path),
                  headers: {
                    "content-type": "application/zip",
                    "content-length": fs.statSync(path).size,
                  },
                });
                core.setOutput("asset_id", asset.id);
    
        - name: Update Release with Asset ID
          uses: actions/github-script@v7
          with:
            script: |
                const release_id = ${{ steps.create_release.outputs.release_id }};
                const asset_id = ${{ steps.upload_asset.outputs.asset_id }};
                const checksum = process.env.CHECKSUM;
    
                await github.rest.repos.updateRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release_id,
                  body: `### UnityFramework iOS Release\n- **Checksum**: ${checksum}\n- **Asset ID**: ${asset_id}`,
                });
